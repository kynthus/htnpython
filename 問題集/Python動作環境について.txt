Pythonの動作環境について



Pythonを動かすには、まずはPython SDKを入れる必要があるが、
ラボ環境のCentOSには既にPythonが入っているので、
手っ取り早く動かしたい場合は、ラボ環境で開発することをオススメする。

もしもローカルPCにSDKを導入し、IntelliJ上で開発したい場合は、
[IntelliJの構築手順]の手順をもとにPython SDKとIntelliJプラグインを導入する。
※ただし、必ず上長からの許可をとること。


1. python3コマンドの有無確認

ラボ環境へ入り、以下のコマンドを入力する。

--------------------------------------------------------------------------------
$ python3 --help
usage: python3 [option] ... [-c cmd | -m mod | file | -] [arg] ...
Options and arguments (and corresponding environment variables):
-b     : issue warnings about str(bytes_instance), str(bytearray_instance)
         and comparing bytes/bytearray with str. (-bb: issue errors)
-B     : don't write .py[co] files on import; also PYTHONDONTWRITEBYTECODE=x
-c cmd : program passed in as string (terminates option list)
-d     : debug output from parser; also PYTHONDEBUG=x
-E     : ignore PYTHON* environment variables (such as PYTHONPATH)
-h     : print this help message and exit (also --help)
-i     : inspect interactively after running script; forces a prompt even
         if stdin does not appear to be a terminal; also PYTHONINSPECT=x
-I     : isolate Python from the user's environment (implies -E and -s)
-m mod : run library module as a script (terminates option list)
-O     : optimize generated bytecode slightly; also PYTHONOPTIMIZE=x
-OO    : remove doc-strings in addition to the -O optimizations
-q     : don't print version and copyright messages on interactive startup
-s     : don't add user site directory to sys.path; also PYTHONNOUSERSITE
-S     : don't imply 'import site' on initialization
-u     : unbuffered binary stdout and stderr, stdin always buffered;
         also PYTHONUNBUFFERED=x
         see man page for details on internal buffering relating to '-u'
-v     : verbose (trace import statements); also PYTHONVERBOSE=x
         can be supplied multiple times to increase verbosity
-V     : print the Python version number and exit (also --version)
-W arg : warning control; arg is action:message:category:module:lineno
         also PYTHONWARNINGS=arg
-x     : skip first line of source, allowing use of non-Unix forms of #!cmd
-X opt : set implementation-specific option
file   : program read from script file
-      : program read from stdin (default; interactive mode if a tty)
arg ...: arguments passed to program in sys.argv[1:]

Other environment variables:
PYTHONSTARTUP: file executed on interactive startup (no default)
PYTHONPATH   : ':'-separated list of directories prefixed to the
               default module search path.  The result is sys.path.
PYTHONHOME   : alternate <prefix> directory (or <prefix>:<exec_prefix>).
               The default module search path uses <prefix>/pythonX.X.
PYTHONCASEOK : ignore case in 'import' statements (Windows).
PYTHONIOENCODING: Encoding[:errors] used for stdin/stdout/stderr.
PYTHONFAULTHANDLER: dump the Python traceback on fatal errors.
PYTHONHASHSEED: if this variable is set to 'random', a random value is used
   to seed the hashes of str, bytes and datetime objects.  It can also be
   set to an integer in the range [0,4294967295] to get hash values with a
   predictable seed.

--------------------------------------------------------------------------------
※「python3 -h」でも可

python3コマンドのヘルプが表示されればOK。



2. Pythonのバージョンを確認

以下のコマンドを入力する。

--------------------------------------------------------------------------------
$ python3 --version
Python 3.5.2 ← ここは変える必要アリ

--------------------------------------------------------------------------------
※「python3 -V」でも可

以上より、ラボ環境のPythonのバージョンは3.4.16であることが分かる。

ここだけの話、Python 3.4系は既にサポート終了しているため、
あまり良い開発環境でないが致し方なし……
気になる場合はローカルPCに新しいPython SDKを入れる。



3. Python v2系のコマンド

python3コマンドはPython v3系用のコマンドである。
古いv2系を使用する場合は以下のコマンドを入力する。

--------------------------------------------------------------------------------
$ python2 --version
Python 2.7.5

--------------------------------------------------------------------------------

または以下でも同様。

--------------------------------------------------------------------------------
$ python --version
Python 2.7.5

--------------------------------------------------------------------------------


上記のとおり、ほとんどのPython開発環境において、
無印pythonコマンドはpython v2系コマンドのエイリアスである。

今後はPython v3系が主流となるので、python3コマンドでの開発を心がけよう。

※Python v2系は2020年にサポート終了予定
  ただし、PySparkはいまだにv2系が主流なので注意。
  いい加減v3に移行して欲しいが、Spark v3までの辛抱かと……
  個人的にSpark 3も、Scala 3が出るまで出なそ～な雰囲気はある……



4. 対話型シェル

以下のようにpython3コマンドに何も指定しなければ、
それだけでPythonの対話型シェルが立ち上がる。

--------------------------------------------------------------------------------
$ python3
Python 3.5.2 (default, Oct  8 2019, 13:06:37)
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> 

--------------------------------------------------------------------------------

試しに「Hello, World.」を表示させてみよう。

--------------------------------------------------------------------------------
>>> print('Hello, World.')
Hello, World.

--------------------------------------------------------------------------------

他にもいろいろ試しみよう。

対話型シェルを抜けるには「quit()」と入力する。

--------------------------------------------------------------------------------
>>> quit()
$

--------------------------------------------------------------------------------



5. スクリプト実行

以下のプログラムを作って動かしてみる。

----------------------------------- hello.py -----------------------------------
print('Hello, World.')

--------------------------------------------------------------------------------

python3コマンドの引数にソースファイルを指定すれば実行することができる。

--------------------------------------------------------------------------------
$ python3 hello.py
Hello, World.

--------------------------------------------------------------------------------



6. Python格言

対話型シェルを立ち上げて以下を入力してみよう。

--------------------------------------------------------------------------------
$ python3
Python 3.5.2 (default, Oct  8 2019, 13:06:37)
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!

--------------------------------------------------------------------------------

これはPythonプログラマが心得るべき14個の格言である。

Beautiful is better than ugly.
醜いコードより美しいコードを書こう。

Explicit is better than implicit.
暗黙的ではなく、明示的にしよう。

Simple is better than complex.
シンプル is ベター。

Complex is better than complicated.
ただし、込み入っているよりかは複雑な方がマシ。

Flat is better than nested.
ネストは浅くしよう。

Sparse is better than dense.
密集しているよりは隙間があるほうがいい。。
※ようは「密結合より疎結合を選べ」

Readability counts.
読みやすいは正義。

Special cases aren't special enough to break the rules.
特殊だからといって、ルールを破るのはNG。

Although practicality beats purity.
しかし、実用性を得るために純粋さを犠牲にする場面はある。

Errors should never pass silently.
エラーは隠すな、無視するな。

Unless explicitly silenced.
でもわざと隠されているなら、見逃してよし。

In the face of ambiguity, refuse the temptation to guess.
曖昧なものに出逢ったら、その意味を適当に推測してはいけない。

There should be one-- and preferably only one --obvious way to do it.
何かいい方法があるはずだ。誰からでも支持される、たったひとつの方法が。

Although that way may not be obvious at first unless you're Dutch.
その方法は一目見ただけでは難解かもしれない。
オランダ人になら一目で分かる、なんてこともあるかもしれない。

Now is better than never.
ずっとやらないでいるよりは、今やれ。

Although never is often better than *right* now.
でも、今"すぐ"にやるよりはやらないほうがマシなことが多い。

If the implementation is hard to explain, it's a bad idea.
コードの内容を説明するのが難しいのなら、それは悪い実装である。

If the implementation is easy to explain, it may be a good idea.
コードの内容を容易に説明できるのなら、それは大概よい実装である。

Namespaces are one honking great idea -- let's do more of those!
名前空間は優れたアイデアであるため、積極的に利用すべきである。
